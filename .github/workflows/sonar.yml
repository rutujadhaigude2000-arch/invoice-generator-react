name: CI / SonarCloud Scan

on:
  push:
    branches: [ dev, master ]
  pull_request:
    branches: [ master ] # adjust if you also want PRs into dev

permissions:
  contents: read
  pull-requests: write   # needed so Sonar can decorate PRs / add comments

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 3Ô∏è‚É£ Cache Node Modules
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4Ô∏è‚É£ Install Dependencies
      - name: Install dependencies
        run: npm ci

      # 5Ô∏è‚É£ Run Tests with Coverage
      - name: Run tests with coverage
        run: |
          npm install --save-dev jest-canvas-mock
          echo "import 'jest-canvas-mock';" > src/setupTests.js
          npx jest --coverage --watchAll=false --passWithNoTests --bail=0 \
            --json --outputFile=jest-results.json \
            --coverageReporters=text --coverageReporters=lcov --coverageReporters=html || echo "‚ö†Ô∏è Tests failed but continuing"

      # 6Ô∏è‚É£ Build App (React/Node)
      - name: Build project
        run: CI=false npm run build --if-present
        env:
          NODE_OPTIONS: --openssl-legacy-provider

      # 7Ô∏è‚É£ SonarCloud Scan (pushes)
      - name: SonarCloud Scan (push)
        if: github.event_name == 'push'
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=RADhaigude_invoice-generator-react
            -Dsonar.organization=radhaigude
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,coverage/**,build/**,dist/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      # 8Ô∏è‚É£ SonarCloud Scan (pull requests)
      - name: SonarCloud Scan (PR)
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=RADhaigude_invoice-generator-react
            -Dsonar.organization=radhaigude
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,coverage/**,build/**,dist/**
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

      # 9Ô∏è‚É£ Fetch Quality Gate Status
      - name: Fetch Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            curl -s -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=RADhaigude_invoice-generator-react&pullRequest=${{ github.event.pull_request.number }}" \
              -o sonar_quality_gate.json
          else
            curl -s -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=RADhaigude_invoice-generator-react" \
              -o sonar_quality_gate.json
          fi
          cat sonar_quality_gate.json

      # üîü Generate Reports (CSV/XLSX/DOCX/MD/RTF)
      - name: Generate SonarCloud Reports
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install requests openpyxl python-docx pypandoc lxml
          cat > sonar_report.py <<'EOF'
          import requests, os, base64, csv
          from openpyxl import Workbook
          from docx import Document
          import pypandoc
          token = os.getenv("SONAR_TOKEN")
          project = "RADhaigude_invoice-generator-react"
          metrics = ",".join([
              "bugs","vulnerabilities","code_smells",
              "coverage","duplicated_lines_density",
              "reliability_rating","security_rating","sqale_rating",
              "ncloc","cognitive_complexity"
          ])
          url = f"https://sonarcloud.io/api/measures/component?component={project}&metricKeys={metrics}"
          headers = {"Authorization": "Basic " + base64.b64encode(f"{token}:".encode()).decode()}
          r = requests.get(url, headers=headers)
          r.raise_for_status()
          data = r.json()["component"]["measures"]

          # CSV
          with open("sonar_report.csv", "w", newline="") as f:
              writer = csv.writer(f); writer.writerow(["Metric","Value"])
              for m in data: writer.writerow([m["metric"], m.get("value","")])

          # XLSX
          wb = Workbook(); ws = wb.active; ws.append(["Metric","Value"])
          for m in data: ws.append([m["metric"], m.get("value","")])
          wb.save("sonar_report.xlsx")

          # DOCX
          doc = Document(); doc.add_heading("SonarCloud Report", 0)
          table = doc.add_table(rows=1, cols=2)
          hdr = table.rows[0].cells; hdr[0].text, hdr[1].text = "Metric","Value"
          for m in data:
              row = table.add_row().cells; row[0].text, row[1].text = m["metric"], m.get("value","")
          doc.save("sonar_report.docx")

          # MD + RTF
          md = "# SonarCloud Report\n\n| Metric | Value |\n|--------|-------|\n"
          for m in data: md += f"| {m['metric']} | {m.get('value','')} |\n"
          open("sonar_report.md","w").write(md)
          pypandoc.convert_text(md, 'rtf', format='md', outputfile='sonar_report_quality.rtf', extra_args=['--standalone'])
          EOF
          python3 sonar_report.py

      # 1Ô∏è‚É£1Ô∏è‚É£ Job Summary
      - name: Create Job Summary
        if: always()
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f sonar_quality_gate.json ]; then
            STATUS=$(jq -r '.projectStatus.status' sonar_quality_gate.json)
            echo "### SonarCloud Quality Gate" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** \`$STATUS\`" >> $GITHUB_STEP_SUMMARY
          fi

      # 1Ô∏è‚É£2Ô∏è‚É£ Block Merge if Quality Gate Fails
      - name: Enforce Quality Gate
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
          (github.event_name == 'pull_request' && github.base_ref == 'master')
        run: |
          STATUS=$(jq -r '.projectStatus.status' sonar_quality_gate.json)
          if [ "$STATUS" != "OK" ]; then
            echo "‚ùå Quality Gate Failed ($STATUS)"
            exit 1
          fi

      # 1Ô∏è‚É£3Ô∏è‚É£ Upload Reports
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: sonar-reports
          path: |
            sonar_quality_gate.json
            sonar_report.*
            coverage/**
            jest-results.json
            build/**
          retention-days: 7
