name: CI / SonarCloud Scan

on:
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - master   # Only trigger PR checks into master (adjust if needed)

jobs:
  sonarcloud:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 3Ô∏è‚É£ Cache Node.js dependencies
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5Ô∏è‚É£ Run tests with coverage
      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false --passWithNoTests || true

      # 6Ô∏è‚É£ Build project
      - name: Build project
        run: |
          CI=false npm run build --if-present
        env:
          NODE_OPTIONS: --openssl-legacy-provider

      # 7Ô∏è‚É£ SonarCloud Scan for push
      - name: SonarCloud Scan (push)
        if: github.event_name == 'push'
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=RADhaigude_invoice-generator-react
            -Dsonar.organization=radhaigude
            -Dsonar.sources=.

      # 8Ô∏è‚É£ SonarCloud Scan for pull requests
      - name: SonarCloud Scan (PR)
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=RADhaigude_invoice-generator-react
            -Dsonar.organization=radhaigude
            -Dsonar.sources=.
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

      # 9Ô∏è‚É£ Fetch Quality Gate JSON from SonarCloud
      - name: Fetch Quality Gate status
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=RADhaigude_invoice-generator-react&pullRequest=${{ github.event.pull_request.number }}" \
              -o sonar_quality_gate.json
          else
            curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=RADhaigude_invoice-generator-react" \
              -o sonar_quality_gate.json
          fi
          cat sonar_quality_gate.json

      # üîü Convert Quality Gate JSON to HTML
      - name: Convert Quality Gate JSON to HTML
        run: |
          echo "<html><head><title>SonarCloud Quality Gate</title></head><body>" > sonar_quality_gate.html
          echo "<h1>Quality Gate Status: $(jq -r '.projectStatus.status' sonar_quality_gate.json)</h1>" >> sonar_quality_gate.html
          echo "<table border='1' cellpadding='5'><tr><th>Metric</th><th>Status</th><th>Actual Value</th><th>Error Threshold</th></tr>" >> sonar_quality_gate.html
          jq -c '.projectStatus.conditions[]' sonar_quality_gate.json | while read row; do
            METRIC=$(echo $row | jq -r '.metricKey')
            STATUS=$(echo $row | jq -r '.status')
            ACTUAL=$(echo $row | jq -r '.actualValue')
            THRESHOLD=$(echo $row | jq -r '.errorThreshold')
            echo "<tr><td>$METRIC</td><td>$STATUS</td><td>$ACTUAL</td><td>$THRESHOLD</td></tr>" >> sonar_quality_gate.html
          done
          echo "</table></body></html>" >> sonar_quality_gate.html

      # 1Ô∏è‚É£1Ô∏è‚É£ Install Python dependencies and Pandoc
      - name: Install Python dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc
          pip install requests openpyxl python-docx pypandoc lxml

      # 1Ô∏è‚É£2Ô∏è‚É£ Generate Multi-format Reports
      - name: Generate SonarCloud Reports
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cat > sonar_report.py <<'EOF'
          import requests, csv, os, base64
          from openpyxl import Workbook
          from docx import Document
          import pypandoc

          token = os.getenv("SONAR_TOKEN")
          project = "RADhaigude_invoice-generator-react"
          metrics = "bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density"
          url = f"https://sonarcloud.io/api/measures/component?component={project}&metricKeys={metrics}"

          headers = {"Authorization": "Basic " + base64.b64encode(f"{token}:".encode()).decode()}
          r = requests.get(url, headers=headers)
          if r.status_code != 200:
              print("‚ùå API call failed:", r.status_code, r.text)
              exit(1)

          data = r.json()["component"]["measures"]

          # CSV
          with open("sonar_report.csv", "w", newline="") as f:
              writer = csv.writer(f)
              writer.writerow(["Metric", "Value"])
              for m in data:
                  writer.writerow([m["metric"], m["value"]])

          # XLSX
          wb = Workbook()
          ws = wb.active
          ws.append(["Metric", "Value"])
          for m in data:
              ws.append([m["metric"], m["value"]])
          wb.save("sonar_report.xlsx")

          # DOCX
          doc = Document()
          doc.add_heading("SonarCloud Report", 0)
          table = doc.add_table(rows=1, cols=2)
          hdr = table.rows[0].cells
          hdr[0].text, hdr[1].text = "Metric", "Value"
          for m in data:
              row = table.add_row().cells
              row[0].text, row[1].text = m["metric"], m["value"]
          doc.save("sonar_report.docx")

          # Markdown
          md_content = "# SonarCloud Report\n\n| Metric | Value |\n|--------|-------|\n"
          for m in data:
              md_content += f"| {m['metric']} | {m['value']} |\n"
          with open("sonar_report.md", "w") as f:
              f.write(md_content)

          # RTF (requires pandoc)
          pypandoc.convert_text(md_content, 'rtf', format='md', outputfile='sonar_report_quality.rtf', extra_args=['--standalone'])

          print("‚úÖ Reports generated: CSV, XLSX, DOCX, MD, RTF")
          EOF
          python sonar_report.py

      # 1Ô∏è‚É£3Ô∏è‚É£ Upload artifacts (all reports)
      - name: Upload SonarCloud Reports
        uses: actions/upload-artifact@v4
        with:
          name: sonarcloud-reports
          path: |
            sonar_quality_gate.json
            sonar_quality_gate.html
            sonar_report.csv
            sonar_report.xlsx
            sonar_report.docx
            sonar_report.md
            sonar_report_quality.rtf

