name: CI / SonarCloud Scan
on:
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - master   # Only trigger PR checks into master (adjust if needed)

jobs:
  sonarcloud:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 3Ô∏è‚É£ Cache Node.js dependencies
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5Ô∏è‚É£ Run tests with coverage (pipeline continues even if no tests)
      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false --passWithNoTests || true

      # 6Ô∏è‚É£ Build project (React + Node 18 fix)
      - name: Build project
        run: |
          CI=false npm run build --if-present
        env:
          NODE_OPTIONS: --openssl-legacy-provider

      # 7Ô∏è‚É£ SonarCloud Scan for push events
      - name: SonarCloud Scan (push)
        if: github.event_name == 'push'
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=RADhaigude_invoice-generator-react
            -Dsonar.organization=radhaigude
            -Dsonar.sources=.

      # 8Ô∏è‚É£ SonarCloud Scan for pull requests
      - name: SonarCloud Scan (PR)
        if: github.event_name == 'pull_request'
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=RADhaigude_invoice-generator-react
            -Dsonar.organization=radhaigude
            -Dsonar.sources=.
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

      # 9Ô∏è‚É£ Fetch Quality Gate JSON from SonarCloud
      - name: Fetch Quality Gate status
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=RADhaigude_invoice-generator-react&pullRequest=${{ github.event.pull_request.number }}" \
              -o sonar_quality_gate.json
          else
            curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=RADhaigude_invoice-generator-react" \
              -o sonar_quality_gate.json
          fi
          cat sonar_quality_gate.json

      # üîü Convert Quality Gate JSON to styled HTML report
      - name: Convert Quality Gate JSON to Styled HTML
        run: |
          echo "<html><head><title>SonarCloud Quality Gate</title>" > sonar_quality_gate.html
          echo "<style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            h1 { color: #333; }
            .section { margin-bottom: 20px; border: 1px solid #ccc; border-radius: 6px; }
            .header { padding: 8px; font-weight: bold; color: #fff; }
            .failed { background-color: #e74c3c; }
            .passed { background-color: #2ecc71; }
            .skipped { background-color: #f1c40f; }
            table { width: 100%; border-collapse: collapse; margin-top: 10px; }
            th, td { border: 1px solid #ccc; padding: 6px; text-align: left; }
          </style></head><body>" >> sonar_quality_gate.html

          STATUS=$(jq -r '.projectStatus.status' sonar_quality_gate.json)
          echo "<h1>SonarCloud Quality Gate: $STATUS</h1>" >> sonar_quality_gate.html

          # Failed Conditions
          echo "<div class='section'><div class='header failed'>‚ùå Failed Conditions</div><table><tr><th>Metric</th><th>Actual</th><th>Threshold</th></tr>" >> sonar_quality_gate.html
          jq -c '.projectStatus.conditions[] | select(.status=="ERROR")' sonar_quality_gate.json | while read row; do
            METRIC=$(echo $row | jq -r '.metricKey')
            ACTUAL=$(echo $row | jq -r '.actualValue')
            THRESHOLD=$(echo $row | jq -r '.errorThreshold')
            echo "<tr><td>$METRIC</td><td>$ACTUAL</td><td>$THRESHOLD</td></tr>" >> sonar_quality_gate.html
          done
          echo "</table></div>" >> sonar_quality_gate.html

          # Skipped / Warn
          echo "<div class='section'><div class='header skipped'>‚ö†Ô∏è Warnings / Skipped</div><table><tr><th>Metric</th><th>Actual</th><th>Threshold</th></tr>" >> sonar_quality_gate.html
          jq -c '.projectStatus.conditions[] | select(.status=="WARN")' sonar_quality_gate.json | while read row; do
            METRIC=$(echo $row | jq -r '.metricKey')
            ACTUAL=$(echo $row | jq -r '.actualValue')
            THRESHOLD=$(echo $row | jq -r '.errorThreshold')
            echo "<tr><td>$METRIC</td><td>$ACTUAL</td><td>$THRESHOLD</td></tr>" >> sonar_quality_gate.html
          done
          echo "</table></div>" >> sonar_quality_gate.html

          # Passed
          echo "<div class='section'><div class='header passed'>‚úÖ Passed Conditions</div><table><tr><th>Metric</th><th>Actual</th><th>Threshold</th></tr>" >> sonar_quality_gate.html
          jq -c '.projectStatus.conditions[] | select(.status=="OK")' sonar_quality_gate.json | while read row; do
            METRIC=$(echo $row | jq -r '.metricKey')
            ACTUAL=$(echo $row | jq -r '.actualValue')
            THRESHOLD=$(echo $row | jq -r '.errorThreshold')
            echo "<tr><td>$METRIC</td><td>$ACTUAL</td><td>$THRESHOLD</td></tr>" >> sonar_quality_gate.html
          done
          echo "</table></div>" >> sonar_quality_gate.html

          echo "</body></html>" >> sonar_quality_gate.html

      # 1Ô∏è‚É£1Ô∏è‚É£ Upload artifacts (JSON + HTML)
      - name: Upload Quality Gate artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sonar-quality-gate
          path: |
            sonar_quality_gate.json
            sonar_quality_gate.html
